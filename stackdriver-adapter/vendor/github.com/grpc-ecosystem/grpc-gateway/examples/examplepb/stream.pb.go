// Code generated by protoc-gen-go.
// source: examples/examplepb/stream.proto
// DO NOT EDIT!

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import grpc_gateway_examples_sub "github.com/grpc-ecosystem/grpc-gateway/examples/sub"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StreamService service

type StreamServiceClient interface {
	BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error)
	List(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error)
	BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/grpc.gateway.examples.examplepb.StreamService/BulkCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkCreateClient{stream}
	return x, nil
}

type StreamService_BulkCreateClient interface {
	Send(*ABitOfEverything) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type streamServiceBulkCreateClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkCreateClient) Send(m *ABitOfEverything) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkCreateClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) List(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[1], c.cc, "/grpc.gateway.examples.examplepb.StreamService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ListClient interface {
	Recv() (*ABitOfEverything, error)
	grpc.ClientStream
}

type streamServiceListClient struct {
	grpc.ClientStream
}

func (x *streamServiceListClient) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[2], c.cc, "/grpc.gateway.examples.examplepb.StreamService/BulkEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkEchoClient{stream}
	return x, nil
}

type StreamService_BulkEchoClient interface {
	Send(*grpc_gateway_examples_sub.StringMessage) error
	Recv() (*grpc_gateway_examples_sub.StringMessage, error)
	grpc.ClientStream
}

type streamServiceBulkEchoClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkEchoClient) Send(m *grpc_gateway_examples_sub.StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkEchoClient) Recv() (*grpc_gateway_examples_sub.StringMessage, error) {
	m := new(grpc_gateway_examples_sub.StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	BulkCreate(StreamService_BulkCreateServer) error
	List(*google_protobuf1.Empty, StreamService_ListServer) error
	BulkEcho(StreamService_BulkEchoServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_BulkCreate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BulkCreate(&streamServiceBulkCreateServer{stream})
}

type StreamService_BulkCreateServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*ABitOfEverything, error)
	grpc.ServerStream
}

type streamServiceBulkCreateServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkCreateServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkCreateServer) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).List(m, &streamServiceListServer{stream})
}

type StreamService_ListServer interface {
	Send(*ABitOfEverything) error
	grpc.ServerStream
}

type streamServiceListServer struct {
	grpc.ServerStream
}

func (x *streamServiceListServer) Send(m *ABitOfEverything) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_BulkEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BulkEcho(&streamServiceBulkEchoServer{stream})
}

type StreamService_BulkEchoServer interface {
	Send(*grpc_gateway_examples_sub.StringMessage) error
	Recv() (*grpc_gateway_examples_sub.StringMessage, error)
	grpc.ServerStream
}

type streamServiceBulkEchoServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkEchoServer) Send(m *grpc_gateway_examples_sub.StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkEchoServer) Recv() (*grpc_gateway_examples_sub.StringMessage, error) {
	m := new(grpc_gateway_examples_sub.StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkCreate",
			Handler:       _StreamService_BulkCreate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _StreamService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkEcho",
			Handler:       _StreamService_BulkEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("examples/examplepb/stream.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe5, 0xef, 0x43, 0x08, 0x8c, 0x58, 0x3c, 0x30, 0x18, 0xa4, 0x8a, 0x0a, 0x89, 0x82,
	0x90, 0xdd, 0xc2, 0xc6, 0x46, 0x51, 0x37, 0x10, 0x43, 0x37, 0x96, 0xca, 0xae, 0x4e, 0x5d, 0x8b,
	0x24, 0xb6, 0x62, 0x27, 0x10, 0x89, 0x89, 0x91, 0xb5, 0x37, 0xc2, 0xbd, 0x70, 0x0b, 0x5c, 0x08,
	0x6e, 0xfe, 0xa6, 0x56, 0x2d, 0x5b, 0x92, 0xf3, 0x9e, 0xbc, 0xcf, 0x79, 0x70, 0x07, 0xde, 0x44,
	0x6c, 0x23, 0x70, 0xbc, 0x7e, 0xb0, 0x92, 0x3b, 0x9f, 0x82, 0x88, 0x99, 0x4d, 0x8d, 0x37, 0xa4,
	0xa3, 0x52, 0x3b, 0x65, 0x4a, 0x78, 0x78, 0x15, 0x05, 0x6b, 0xd2, 0xac, 0x4d, 0xd3, 0x13, 0x65,
	0x8c, 0x8a, 0x80, 0x0b, 0xab, 0xb9, 0x48, 0x12, 0xe3, 0x85, 0xd7, 0x26, 0x71, 0xd5, 0x3a, 0x3d,
	0xae, 0xa7, 0xe5, 0x9b, 0xcc, 0x66, 0x1c, 0x62, 0xeb, 0x8b, 0x7a, 0x78, 0xb5, 0xa2, 0x5c, 0x4c,
	0xa4, 0xf6, 0x13, 0x33, 0x9b, 0x40, 0x0e, 0x69, 0xe1, 0xe7, 0x3a, 0x51, 0x75, 0x9a, 0xb6, 0x69,
	0x97, 0x49, 0x1e, 0x83, 0x73, 0x42, 0x41, 0x35, 0xbb, 0xfe, 0xfa, 0x8f, 0x0f, 0xc7, 0x25, 0xf6,
	0x18, 0xd2, 0x5c, 0x4f, 0x81, 0x7c, 0x22, 0x8c, 0x87, 0x59, 0xf4, 0x72, 0x1f, 0x3e, 0x7a, 0x20,
	0x03, 0xb6, 0xe1, 0x0e, 0x76, 0x37, 0xd4, 0xfe, 0x69, 0x36, 0x6a, 0x5b, 0xe9, 0x11, 0xab, 0xd8,
	0x59, 0xc3, 0xce, 0x46, 0x4b, 0xf6, 0x2e, 0xff, 0xf8, 0xfe, 0x59, 0xfc, 0xbb, 0xe8, 0x9e, 0xf1,
	0x7c, 0xd0, 0x80, 0xaf, 0xc2, 0xe6, 0x32, 0xd4, 0xdf, 0xa2, 0xcb, 0x1e, 0x22, 0xef, 0x78, 0xe7,
	0x41, 0x3b, 0x4f, 0xd6, 0xfc, 0x92, 0xfe, 0x9d, 0xae, 0x7b, 0x5e, 0x52, 0x9c, 0x92, 0xce, 0x06,
	0x8a, 0x3e, 0x22, 0x0b, 0x84, 0xf7, 0x96, 0x2a, 0x46, 0xd3, 0xb9, 0x21, 0xbd, 0x35, 0x55, 0xc1,
	0x29, 0x0b, 0x06, 0xc3, 0xc6, 0x63, 0x65, 0x96, 0x6e, 0x9d, 0xdc, 0xde, 0x08, 0x04, 0x82, 0xd2,
	0x48, 0x1f, 0x0d, 0x0f, 0x9e, 0xf7, 0xdb, 0xf3, 0xe4, 0x6e, 0x29, 0xe4, 0xe6, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x52, 0x49, 0x85, 0x8f, 0x02, 0x00, 0x00,
}
